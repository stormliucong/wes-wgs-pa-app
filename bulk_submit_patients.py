#!/usr/bin/env python3
"""
Bulk Submission Tool for Synthetic Patient Data

This script reads JSONL files generated by generate_test_patients.py and submits
them to the pre-authorization form for testing purposes.

Usage:
    python bulk_submit_patients.py test_patients.jsonl
    python bulk_submit_patients.py test_patients.jsonl --url http://localhost:5001
    python bulk_submit_patients.py test_patients.jsonl --limit 10 --delay 1
"""

import argparse
import json
import sys
import time
from pathlib import Path
from typing import Dict, Any, List
import requests


class BulkSubmitter:
    """Submits synthetic patient data to the pre-authorization form."""
    
    def __init__(self, base_url: str = "http://127.0.0.1:5001"):
        self.base_url = base_url.rstrip('/')
        self.submit_url = f"{self.base_url}/submit"
        self.session = requests.Session()
    
    def load_patients_from_jsonl(self, file_path: str) -> List[Dict[str, Any]]:
        """Load patient profiles from JSONL file."""
        patients = []
        file_path_obj = Path(file_path)
        
        if not file_path_obj.exists():
            raise FileNotFoundError(f"File not found: {file_path}")
        
        with file_path_obj.open('r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                
                try:
                    patient = json.loads(line)
                    patients.append(patient)
                except json.JSONDecodeError as e:
                    print(f"Warning: Invalid JSON on line {line_num}: {e}")
                    continue
        
        return patients
    
    def test_connection(self) -> bool:
        """Test if the server is responding."""
        try:
            health_url = f"{self.base_url}/health"
            response = self.session.get(health_url, timeout=5)
            if response.status_code == 200:
                print(f"✅ Server is responding at {self.base_url}")
                return True
            else:
                print(f"❌ Server responded with status {response.status_code}")
                return False
        except requests.RequestException as e:
            print(f"❌ Cannot connect to server at {self.base_url}: {e}")
            return False
    
    def submit_patient(self, patient_data: Dict[str, Any]) -> Dict[str, Any]:
        """Submit a single patient profile."""
        try:
            response = self.session.post(
                self.submit_url,
                json=patient_data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            result = {
                'status_code': response.status_code,
                'success': response.status_code == 200,
                'patient_name': f"{patient_data.get('patient_first_name', '')} {patient_data.get('patient_last_name', '')}".strip(),
                'response_data': response.json() if response.headers.get('content-type', '').startswith('application/json') else None,
                'error': None
            }
            
            if not result['success']:
                result['error'] = f"HTTP {response.status_code}: {response.text[:200]}"
            
            return result
            
        except requests.RequestException as e:
            return {
                'status_code': None,
                'success': False,
                'patient_name': f"{patient_data.get('patient_first_name', '')} {patient_data.get('patient_last_name', '')}".strip(),
                'response_data': None,
                'error': str(e)
            }
    
    def bulk_submit(self, patients: List[Dict[str, Any]], delay: float = 0.5, limit: int = None) -> Dict[str, Any]:
        """Submit multiple patients with optional delay and limit."""
        if limit:
            patients = patients[:limit]
        
        print(f"Submitting {len(patients)} patients...")
        print(f"Delay between submissions: {delay}s")
        print("-" * 60)
        
        results = {
            'total': len(patients),
            'successful': 0,
            'failed': 0,
            'submissions': []
        }
        
        for i, patient in enumerate(patients, 1):
            print(f"[{i:3d}/{len(patients)}] Submitting {patient.get('patient_first_name', 'Unknown')} {patient.get('patient_last_name', 'Patient')}...", end=' ')
            
            result = self.submit_patient(patient)
            results['submissions'].append(result)
            
            if result['success']:
                results['successful'] += 1
                file_ref = result['response_data'].get('file', 'N/A') if result['response_data'] else 'N/A'
                print(f"✅ Success (File: {file_ref})")
            else:
                results['failed'] += 1
                error_msg = result['error'][:50] + '...' if result['error'] and len(result['error']) > 50 else result['error']
                print(f"❌ Failed: {error_msg}")
            
            # Add delay between submissions (except for the last one)
            if i < len(patients) and delay > 0:
                time.sleep(delay)
        
        return results
    
    def print_summary(self, results: Dict[str, Any]):
        """Print a summary of submission results."""
        print("\n" + "=" * 60)
        print("SUBMISSION SUMMARY")
        print("=" * 60)
        print(f"Total patients: {results['total']}")
        print(f"Successful: {results['successful']} ({results['successful']/results['total']*100:.1f}%)")
        print(f"Failed: {results['failed']} ({results['failed']/results['total']*100:.1f}%)")
        
        if results['failed'] > 0:
            print("\nFailed submissions:")
            for submission in results['submissions']:
                if not submission['success']:
                    print(f"  • {submission['patient_name']}: {submission['error']}")
        
        if results['successful'] > 0:
            print(f"\n✅ {results['successful']} patients successfully submitted to the form!")
            print("You can now view them in the admin dashboard.")


def main():
    """Main CLI interface."""
    parser = argparse.ArgumentParser(
        description='Bulk submit synthetic patient data to pre-authorization form',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s test_patients.jsonl
  %(prog)s test_patients.jsonl --url http://localhost:5001
  %(prog)s test_patients.jsonl --limit 10 --delay 1
  %(prog)s large_batch.jsonl --delay 0.1 --limit 50
        """
    )
    
    parser.add_argument(
        'input_file',
        help='JSONL file containing patient profiles (generated by generate_test_patients.py)'
    )
    
    parser.add_argument(
        '--url',
        default='http://127.0.0.1:5001',
        help='Base URL of the Flask application (default: http://127.0.0.1:5001)'
    )
    
    parser.add_argument(
        '--delay',
        type=float,
        default=0.5,
        help='Delay in seconds between submissions (default: 0.5)'
    )
    
    parser.add_argument(
        '--limit',
        type=int,
        help='Maximum number of patients to submit (default: all)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Load and validate data without actually submitting'
    )
    
    args = parser.parse_args()
    
    # Initialize submitter
    submitter = BulkSubmitter(args.url)
    
    # Load patient data
    try:
        print(f"Loading patient data from: {args.input_file}")
        patients = submitter.load_patients_from_jsonl(args.input_file)
        print(f"Loaded {len(patients)} patient profiles")
    except Exception as e:
        print(f"Error loading patient data: {e}")
        sys.exit(1)
    
    if not patients:
        print("No valid patient profiles found.")
        sys.exit(1)
    
    # Apply limit if specified
    if args.limit:
        patients = patients[:args.limit]
        print(f"Limited to first {len(patients)} patients")
    
    # Dry run mode
    if args.dry_run:
        print("\nDRY RUN MODE - No actual submissions will be made")
        print(f"Would submit {len(patients)} patients to {args.url}")
        print(f"Sample patient: {patients[0]['patient_first_name']} {patients[0]['patient_last_name']}")
        return
    
    # Test connection
    if not submitter.test_connection():
        print("\nTip: Make sure your Flask server is running:")
        print("     cd /path/to/wes-wgs-pa-app")
        print("     python -m flask --app app.main run --debug --port 5001")
        sys.exit(1)
    
    # Submit patients
    try:
        results = submitter.bulk_submit(patients, args.delay, args.limit)
        submitter.print_summary(results)
        
        # Exit with error code if any submissions failed
        if results['failed'] > 0:
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nSubmission interrupted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\nUnexpected error during submission: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()